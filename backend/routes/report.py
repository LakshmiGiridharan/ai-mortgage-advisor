from fastapi import APIRouter, Response
from pydantic import BaseModel
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.colors import HexColor
from reportlab.lib.utils import ImageReader
import matplotlib.pyplot as plt

router = APIRouter()

class ReportRequest(BaseModel):
    name: str
    eligible: bool
    eligibleAmount: float
    requestedAmount: float
    creditScore: int
    loanType: str
    loanTerm: int
    reasons: list[str]

@router.post("/download-report")
async def generate_report(data: ReportRequest):
    buffer = BytesIO()

    # Setup PDF
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    # Header
    c.setFillColor(HexColor("#0A84FF"))
    c.setFont("Helvetica-Bold", 20)
    c.drawString(50, height - 50, "üìù Mortgage Eligibility Report")

    c.setFont("Helvetica", 12)
    c.setFillColor(HexColor("#333333"))
    c.drawString(50, height - 90, f"Name: {data.name}")
    c.drawString(50, height - 110, f"Credit Score: {data.creditScore}")
    c.drawString(50, height - 130, f"Loan Type: {data.loanType}")
    c.drawString(50, height - 150, f"Loan Term: {data.loanTerm} years")

    # Result
    c.setFont("Helvetica-Bold", 14)
    result_y = height - 190
    if data.eligible:
        c.setFillColor(HexColor("#2ECC71"))
        c.drawString(50, result_y, "‚úÖ Congratulations! You are eligible.")
        c.drawString(50, result_y - 20, f"Eligible Loan Amount: ${data.eligibleAmount:,.2f}")
    else:
        c.setFillColor(HexColor("#E74C3C"))
        c.drawString(50, result_y, "‚ùå You are not currently eligible.")
        c.drawString(50, result_y - 20, f"Estimated Eligible Amount: ${data.eligibleAmount:,.2f}")

        # Reasons
        c.setFillColor(HexColor("#000000"))
        c.setFont("Helvetica", 12)
        c.drawString(50, result_y - 50, "Reasons:")
        for i, reason in enumerate(data.reasons):
            c.drawString(70, result_y - 70 - (i * 20), f"- {reason}")
    # Reason section in PDF
    if not data.eligible:
         c.setFont("Helvetica", 12)
         c.setFillColor(HexColor("#000000"))
         c.drawString(50, result_y - 50, "Reasons:")
    for i, reason in enumerate(data.reasons):
         c.drawString(70, result_y - 70 - (i * 20), f"- {reason}")


    # Generate pie chart
    values = [
        min(data.eligibleAmount, data.requestedAmount),
        max(0, data.requestedAmount - data.eligibleAmount)
    ]
    labels = ['Approved', 'Unapproved']
    colors = ['#1ABC9C', '#E74C3C']

    fig, ax = plt.subplots(figsize=(3, 3))
    ax.pie(values, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors)
    ax.axis('equal')

    chart_buf = BytesIO()
    plt.savefig(chart_buf, format='PNG', bbox_inches='tight')
    plt.close(fig)
    chart_buf.seek(0)

    # Convert chart buffer to ImageReader
    image_reader = ImageReader(chart_buf)
    c.drawImage(image_reader, width - 250, height - 300, width=180, preserveAspectRatio=True, mask='auto')

    # Footer
    c.setFont("Helvetica-Oblique", 10)
    c.setFillColor(HexColor("#7F8C8D"))
    c.drawString(50, 40, "Generated by AJ ‚Äì Your Mortgage Assistant")

    c.showPage()
    c.save()

    buffer.seek(0)
    return Response(
        content=buffer.read(),
        media_type="application/pdf",
        headers={"Content-Disposition": "attachment; filename=eligibility_report.pdf"}
    )
